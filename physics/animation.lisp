(in-package #:org.shirakumo.fraf.trial)

(defmethod animation-node ((idx integer) (container rigid-shape))
  (aref (physics-primitives container) idx))

(defmethod sample ((primitive primitive) (track transform-track) time &key loop-p)
  (declare (type single-float time))
  (declare (optimize speed))
  (let ((transform (tfrom-mat (primitive-local-transform primitive))))
    (declare (dynamic-extent transform))
    (sample transform track time :loop-p loop-p)
    (!tmat (primitive-local-transform primitive) transform)
    (invalidate-global-bounds-cache primitive)
    (setf (awake-p (entity primitive)) T))
  primitive)

;; KLUDGE: I hate how we have to do the test like this.
(define-handler ((entity rigid-shape) tick :after) ()
  (when (or (skinned-p entity) (typep entity 'animation-controller))
    (let ((palette (palette entity)))
      (loop for primitive across (physics-primitives entity)
            for joint = (primitive-joint-index primitive)
            do (when (<= 0 joint)
                 (m<- (primitive-local-transform primitive)
                      (aref palette joint))
                 (invalidate-global-bounds-cache primitive)
                 (setf (awake-p entity) T))))))
